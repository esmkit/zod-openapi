// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`enhanceWithMetadata handles current and previous schemas: 
{
  "effects": [
    {
      "creationType": "output",
      "path": [
        "property: e",
      ],
      "type": "schema",
      "zodType": ZodCatch {
        "_def": {
          "catchValue": [Function],
          "description": undefined,
          "errorMap": [Function],
          "innerType": ZodString {
            "_def": {
              "checks": [],
              "coerce": false,
              "typeName": "ZodString",
              "zodOpenApi": {
                "current": [Circular],
                "openapi": {
                  "ref": "foo",
                },
              },
            },
            "and": [Function],
            "array": [Function],
            "brand": [Function],
            "catch": [Function],
            "default": [Function],
            "describe": [Function],
            "isNullable": [Function],
            "isOptional": [Function],
            "nullable": [Function],
            "nullish": [Function],
            "optional": [Function],
            "or": [Function],
            "parse": [Function],
            "parseAsync": [Function],
            "pipe": [Function],
            "promise": [Function],
            "readonly": [Function],
            "refine": [Function],
            "refinement": [Function],
            "safeParse": [Function],
            "safeParseAsync": [Function],
            "spa": [Function],
            "superRefine": [Function],
            "transform": [Function],
          },
          "typeName": "ZodCatch",
        },
        "and": [Function],
        "array": [Function],
        "brand": [Function],
        "catch": [Function],
        "default": [Function],
        "describe": [Function],
        "isNullable": [Function],
        "isOptional": [Function],
        "nullable": [Function],
        "nullish": [Function],
        "optional": [Function],
        "or": [Function],
        "parse": [Function],
        "parseAsync": [Function],
        "pipe": [Function],
        "promise": [Function],
        "readonly": [Function],
        "refine": [Function],
        "refinement": [Function],
        "safeParse": [Function],
        "safeParseAsync": [Function],
        "spa": [Function],
        "superRefine": [Function],
        "transform": [Function],
      },
    },
    {
      "creationType": "output",
      "path": [
        "property: f",
      ],
      "type": "schema",
      "zodType": ZodDefault {
        "_def": {
          "defaultValue": [Function],
          "description": undefined,
          "errorMap": [Function],
          "innerType": ZodString {
            "_def": {
              "checks": [],
              "coerce": false,
              "typeName": "ZodString",
              "zodOpenApi": {
                "current": [Circular],
                "openapi": {
                  "ref": "foo",
                },
              },
            },
            "and": [Function],
            "array": [Function],
            "brand": [Function],
            "catch": [Function],
            "default": [Function],
            "describe": [Function],
            "isNullable": [Function],
            "isOptional": [Function],
            "nullable": [Function],
            "nullish": [Function],
            "optional": [Function],
            "or": [Function],
            "parse": [Function],
            "parseAsync": [Function],
            "pipe": [Function],
            "promise": [Function],
            "readonly": [Function],
            "refine": [Function],
            "refinement": [Function],
            "safeParse": [Function],
            "safeParseAsync": [Function],
            "spa": [Function],
            "superRefine": [Function],
            "transform": [Function],
          },
          "typeName": "ZodDefault",
        },
        "and": [Function],
        "array": [Function],
        "brand": [Function],
        "catch": [Function],
        "default": [Function],
        "describe": [Function],
        "isNullable": [Function],
        "isOptional": [Function],
        "nullable": [Function],
        "nullish": [Function],
        "optional": [Function],
        "or": [Function],
        "parse": [Function],
        "parseAsync": [Function],
        "pipe": [Function],
        "promise": [Function],
        "readonly": [Function],
        "refine": [Function],
        "refinement": [Function],
        "safeParse": [Function],
        "safeParseAsync": [Function],
        "spa": [Function],
        "superRefine": [Function],
        "transform": [Function],
      },
    },
  ],
  "schema": {
    "properties": {
      "a": {
        "$ref": "#/components/schemas/foo",
      },
      "b": {
        "$ref": "#/components/schemas/foo",
        "description": "bar",
      },
      "c": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "maxLength": 10,
        "minLength": 1,
      },
      "d": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "description": "bar",
        "maxLength": 10,
        "minLength": 1,
      },
      "e": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "default": "a",
      },
      "f": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "default": "a",
      },
      "g": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "format": "email",
      },
      "h": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "format": "date-time",
      },
      "i": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "example": "foo",
        "maxLength": 10,
        "minLength": 1,
      },
      "j": {
        "$ref": "#/components/schemas/foo",
        "description": "bar",
      },
      "k": {
        "description": "bar",
        "oneOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
          {
            "type": "null",
          },
        ],
      },
      "l": {
        "$ref": "#/components/schemas/foo",
        "description": "bar",
      },
      "m": {
        "$ref": "#/components/schemas/caz",
        "description": "bar",
      },
      "n": {
        "$ref": "#/components/schemas/qux",
      },
      "o": {
        "allOf": [
          {
            "$ref": "#/components/schemas/qux",
          },
        ],
        "description": "qux",
        "properties": {
          "c": {
            "$ref": "#/components/schemas/foo",
          },
        },
        "required": [
          "c",
        ],
      },
    },
    "required": [
      "c",
      "d",
      "e",
      "f",
      "g",
      "h",
      "i",
      "l",
      "m",
      "n",
      "o",
    ],
    "type": "object",
  },
  "type": "schema",
}
 1`] = `
{
  "effects": [
    {
      "creationType": "output",
      "path": [
        "property: e",
      ],
      "type": "schema",
      "zodType": ZodCatch {
        "_def": {
          "catchValue": [Function],
          "description": undefined,
          "errorMap": [Function],
          "innerType": ZodString {
            "_def": {
              "checks": [],
              "coerce": false,
              "typeName": "ZodString",
              "zodOpenApi": {
                "current": [Circular],
                "openapi": {
                  "ref": "foo",
                },
              },
            },
            "and": [Function: and],
            "array": [Function: array],
            "brand": [Function: brand],
            "catch": [Function: catch],
            "default": [Function: default],
            "describe": [Function],
            "isNullable": [Function: isNullable],
            "isOptional": [Function: isOptional],
            "nullable": [Function: nullable],
            "nullish": [Function: nullish],
            "optional": [Function: optional],
            "or": [Function: or],
            "parse": [Function: parse],
            "parseAsync": [Function: AsyncFunction],
            "pipe": [Function: pipe],
            "promise": [Function: promise],
            "readonly": [Function: readonly],
            "refine": [Function: refine],
            "refinement": [Function: refinement],
            "safeParse": [Function: safeParse],
            "safeParseAsync": [Function: AsyncFunction],
            "spa": [Function: AsyncFunction],
            "superRefine": [Function: superRefine],
            "transform": [Function: transform],
            "~standard": {
              "validate": [Function],
              "vendor": "zod",
              "version": 1,
            },
          },
          "typeName": "ZodCatch",
        },
        "and": [Function: and],
        "array": [Function: array],
        "brand": [Function: brand],
        "catch": [Function: catch],
        "default": [Function: default],
        "describe": [Function],
        "isNullable": [Function: isNullable],
        "isOptional": [Function: isOptional],
        "nullable": [Function: nullable],
        "nullish": [Function: nullish],
        "optional": [Function: optional],
        "or": [Function: or],
        "parse": [Function: parse],
        "parseAsync": [Function: AsyncFunction],
        "pipe": [Function: pipe],
        "promise": [Function: promise],
        "readonly": [Function: readonly],
        "refine": [Function: refine],
        "refinement": [Function: refinement],
        "safeParse": [Function: safeParse],
        "safeParseAsync": [Function: AsyncFunction],
        "spa": [Function: AsyncFunction],
        "superRefine": [Function: superRefine],
        "transform": [Function: transform],
        "~standard": {
          "validate": [Function],
          "vendor": "zod",
          "version": 1,
        },
      },
    },
    {
      "creationType": "output",
      "path": [
        "property: f",
      ],
      "type": "schema",
      "zodType": ZodDefault {
        "_def": {
          "defaultValue": [Function],
          "description": undefined,
          "errorMap": [Function],
          "innerType": ZodString {
            "_def": {
              "checks": [],
              "coerce": false,
              "typeName": "ZodString",
              "zodOpenApi": {
                "current": [Circular],
                "openapi": {
                  "ref": "foo",
                },
              },
            },
            "and": [Function: and],
            "array": [Function: array],
            "brand": [Function: brand],
            "catch": [Function: catch],
            "default": [Function: default],
            "describe": [Function],
            "isNullable": [Function: isNullable],
            "isOptional": [Function: isOptional],
            "nullable": [Function: nullable],
            "nullish": [Function: nullish],
            "optional": [Function: optional],
            "or": [Function: or],
            "parse": [Function: parse],
            "parseAsync": [Function: AsyncFunction],
            "pipe": [Function: pipe],
            "promise": [Function: promise],
            "readonly": [Function: readonly],
            "refine": [Function: refine],
            "refinement": [Function: refinement],
            "safeParse": [Function: safeParse],
            "safeParseAsync": [Function: AsyncFunction],
            "spa": [Function: AsyncFunction],
            "superRefine": [Function: superRefine],
            "transform": [Function: transform],
            "~standard": {
              "validate": [Function],
              "vendor": "zod",
              "version": 1,
            },
          },
          "typeName": "ZodDefault",
        },
        "and": [Function: and],
        "array": [Function: array],
        "brand": [Function: brand],
        "catch": [Function: catch],
        "default": [Function: default],
        "describe": [Function],
        "isNullable": [Function: isNullable],
        "isOptional": [Function: isOptional],
        "nullable": [Function: nullable],
        "nullish": [Function: nullish],
        "optional": [Function: optional],
        "or": [Function: or],
        "parse": [Function: parse],
        "parseAsync": [Function: AsyncFunction],
        "pipe": [Function: pipe],
        "promise": [Function: promise],
        "readonly": [Function: readonly],
        "refine": [Function: refine],
        "refinement": [Function: refinement],
        "safeParse": [Function: safeParse],
        "safeParseAsync": [Function: AsyncFunction],
        "spa": [Function: AsyncFunction],
        "superRefine": [Function: superRefine],
        "transform": [Function: transform],
        "~standard": {
          "validate": [Function],
          "vendor": "zod",
          "version": 1,
        },
      },
    },
  ],
  "schema": {
    "properties": {
      "a": {
        "$ref": "#/components/schemas/foo",
      },
      "b": {
        "$ref": "#/components/schemas/foo",
        "description": "bar",
      },
      "c": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "maxLength": 10,
        "minLength": 1,
      },
      "d": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "description": "bar",
        "maxLength": 10,
        "minLength": 1,
      },
      "e": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "default": "a",
      },
      "f": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "default": "a",
      },
      "g": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "format": "email",
      },
      "h": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "format": "date-time",
      },
      "i": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "example": "foo",
        "maxLength": 10,
        "minLength": 1,
      },
      "j": {
        "$ref": "#/components/schemas/foo",
        "description": "bar",
      },
      "k": {
        "description": "bar",
        "oneOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
          {
            "type": "null",
          },
        ],
      },
      "l": {
        "$ref": "#/components/schemas/foo",
        "description": "bar",
      },
      "m": {
        "$ref": "#/components/schemas/caz",
        "description": "bar",
      },
      "n": {
        "$ref": "#/components/schemas/qux",
      },
      "o": {
        "allOf": [
          {
            "$ref": "#/components/schemas/qux",
          },
        ],
        "description": "qux",
        "properties": {
          "c": {
            "$ref": "#/components/schemas/foo",
          },
        },
        "required": [
          "c",
        ],
      },
    },
    "required": [
      "c",
      "d",
      "e",
      "f",
      "g",
      "h",
      "i",
      "l",
      "m",
      "n",
      "o",
    ],
    "type": "object",
  },
  "type": "schema",
}
`;

exports[`enhanceWithMetadata handles current and previous schemas: 
[
  {
    "foo": {
      "type": "string",
    },
  },
  {
    "caz": {
      "properties": {
        "a": {
          "type": "string",
        },
      },
      "required": [
        "a",
      ],
      "type": "object",
    },
  },
  {
    "qux": {
      "allOf": [
        {
          "$ref": "#/components/schemas/caz",
        },
      ],
      "properties": {
        "b": {
          "$ref": "#/components/schemas/foo",
        },
      },
      "required": [
        "b",
      ],
    },
  },
]
 1`] = `
[
  {
    "foo": {
      "type": "string",
    },
  },
  {
    "caz": {
      "properties": {
        "a": {
          "type": "string",
        },
      },
      "required": [
        "a",
      ],
      "type": "object",
    },
  },
  {
    "qux": {
      "allOf": [
        {
          "$ref": "#/components/schemas/caz",
        },
      ],
      "properties": {
        "b": {
          "$ref": "#/components/schemas/foo",
        },
      },
      "required": [
        "b",
      ],
    },
  },
]
`;

exports[`enhanceWithMetadata handles current and previous schemas: 
{
  "effects": [
    {
      "creationType": "input",
      "path": [
        "property: e",
      ],
      "type": "schema",
      "zodType": ZodCatch {
        "_def": {
          "catchValue": [Function],
          "description": undefined,
          "errorMap": [Function],
          "innerType": ZodString {
            "_def": {
              "checks": [],
              "coerce": false,
              "typeName": "ZodString",
              "zodOpenApi": {
                "current": [Circular],
                "openapi": {
                  "ref": "foo",
                },
              },
            },
            "and": [Function],
            "array": [Function],
            "brand": [Function],
            "catch": [Function],
            "default": [Function],
            "describe": [Function],
            "isNullable": [Function],
            "isOptional": [Function],
            "nullable": [Function],
            "nullish": [Function],
            "optional": [Function],
            "or": [Function],
            "parse": [Function],
            "parseAsync": [Function],
            "pipe": [Function],
            "promise": [Function],
            "readonly": [Function],
            "refine": [Function],
            "refinement": [Function],
            "safeParse": [Function],
            "safeParseAsync": [Function],
            "spa": [Function],
            "superRefine": [Function],
            "transform": [Function],
          },
          "typeName": "ZodCatch",
        },
        "and": [Function],
        "array": [Function],
        "brand": [Function],
        "catch": [Function],
        "default": [Function],
        "describe": [Function],
        "isNullable": [Function],
        "isOptional": [Function],
        "nullable": [Function],
        "nullish": [Function],
        "optional": [Function],
        "or": [Function],
        "parse": [Function],
        "parseAsync": [Function],
        "pipe": [Function],
        "promise": [Function],
        "readonly": [Function],
        "refine": [Function],
        "refinement": [Function],
        "safeParse": [Function],
        "safeParseAsync": [Function],
        "spa": [Function],
        "superRefine": [Function],
        "transform": [Function],
      },
    },
    {
      "creationType": "input",
      "path": [
        "property: f",
      ],
      "type": "schema",
      "zodType": ZodDefault {
        "_def": {
          "defaultValue": [Function],
          "description": undefined,
          "errorMap": [Function],
          "innerType": ZodString {
            "_def": {
              "checks": [],
              "coerce": false,
              "typeName": "ZodString",
              "zodOpenApi": {
                "current": [Circular],
                "openapi": {
                  "ref": "foo",
                },
              },
            },
            "and": [Function],
            "array": [Function],
            "brand": [Function],
            "catch": [Function],
            "default": [Function],
            "describe": [Function],
            "isNullable": [Function],
            "isOptional": [Function],
            "nullable": [Function],
            "nullish": [Function],
            "optional": [Function],
            "or": [Function],
            "parse": [Function],
            "parseAsync": [Function],
            "pipe": [Function],
            "promise": [Function],
            "readonly": [Function],
            "refine": [Function],
            "refinement": [Function],
            "safeParse": [Function],
            "safeParseAsync": [Function],
            "spa": [Function],
            "superRefine": [Function],
            "transform": [Function],
          },
          "typeName": "ZodDefault",
        },
        "and": [Function],
        "array": [Function],
        "brand": [Function],
        "catch": [Function],
        "default": [Function],
        "describe": [Function],
        "isNullable": [Function],
        "isOptional": [Function],
        "nullable": [Function],
        "nullish": [Function],
        "optional": [Function],
        "or": [Function],
        "parse": [Function],
        "parseAsync": [Function],
        "pipe": [Function],
        "promise": [Function],
        "readonly": [Function],
        "refine": [Function],
        "refinement": [Function],
        "safeParse": [Function],
        "safeParseAsync": [Function],
        "spa": [Function],
        "superRefine": [Function],
        "transform": [Function],
      },
    },
  ],
  "schema": {
    "properties": {
      "a": {
        "$ref": "#/components/schemas/foo",
      },
      "b": {
        "$ref": "#/components/schemas/foo",
        "description": "bar",
      },
      "c": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "maxLength": 10,
        "minLength": 1,
      },
      "d": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "description": "bar",
        "maxLength": 10,
        "minLength": 1,
      },
      "e": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "default": "a",
      },
      "f": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "default": "a",
      },
      "g": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "format": "email",
      },
      "h": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "format": "date-time",
      },
      "i": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "example": "foo",
        "maxLength": 10,
        "minLength": 1,
      },
      "j": {
        "$ref": "#/components/schemas/foo",
        "description": "bar",
      },
      "k": {
        "description": "bar",
        "oneOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
          {
            "type": "null",
          },
        ],
      },
      "l": {
        "$ref": "#/components/schemas/foo",
        "description": "bar",
      },
      "m": {
        "$ref": "#/components/schemas/caz",
        "description": "bar",
      },
      "n": {
        "$ref": "#/components/schemas/qux",
      },
      "o": {
        "allOf": [
          {
            "$ref": "#/components/schemas/qux",
          },
        ],
        "description": "qux",
        "properties": {
          "c": {
            "$ref": "#/components/schemas/foo",
          },
        },
        "required": [
          "c",
        ],
      },
    },
    "required": [
      "c",
      "d",
      "g",
      "h",
      "i",
      "l",
      "m",
      "n",
      "o",
    ],
    "type": "object",
  },
  "type": "schema",
}
 1`] = `
{
  "effects": [
    {
      "creationType": "input",
      "path": [
        "property: e",
      ],
      "type": "schema",
      "zodType": ZodCatch {
        "_def": {
          "catchValue": [Function],
          "description": undefined,
          "errorMap": [Function],
          "innerType": ZodString {
            "_def": {
              "checks": [],
              "coerce": false,
              "typeName": "ZodString",
              "zodOpenApi": {
                "current": [Circular],
                "openapi": {
                  "ref": "foo",
                },
              },
            },
            "and": [Function: and],
            "array": [Function: array],
            "brand": [Function: brand],
            "catch": [Function: catch],
            "default": [Function: default],
            "describe": [Function],
            "isNullable": [Function: isNullable],
            "isOptional": [Function: isOptional],
            "nullable": [Function: nullable],
            "nullish": [Function: nullish],
            "optional": [Function: optional],
            "or": [Function: or],
            "parse": [Function: parse],
            "parseAsync": [Function: AsyncFunction],
            "pipe": [Function: pipe],
            "promise": [Function: promise],
            "readonly": [Function: readonly],
            "refine": [Function: refine],
            "refinement": [Function: refinement],
            "safeParse": [Function: safeParse],
            "safeParseAsync": [Function: AsyncFunction],
            "spa": [Function: AsyncFunction],
            "superRefine": [Function: superRefine],
            "transform": [Function: transform],
            "~standard": {
              "validate": [Function],
              "vendor": "zod",
              "version": 1,
            },
          },
          "typeName": "ZodCatch",
        },
        "and": [Function: and],
        "array": [Function: array],
        "brand": [Function: brand],
        "catch": [Function: catch],
        "default": [Function: default],
        "describe": [Function],
        "isNullable": [Function: isNullable],
        "isOptional": [Function: isOptional],
        "nullable": [Function: nullable],
        "nullish": [Function: nullish],
        "optional": [Function: optional],
        "or": [Function: or],
        "parse": [Function: parse],
        "parseAsync": [Function: AsyncFunction],
        "pipe": [Function: pipe],
        "promise": [Function: promise],
        "readonly": [Function: readonly],
        "refine": [Function: refine],
        "refinement": [Function: refinement],
        "safeParse": [Function: safeParse],
        "safeParseAsync": [Function: AsyncFunction],
        "spa": [Function: AsyncFunction],
        "superRefine": [Function: superRefine],
        "transform": [Function: transform],
        "~standard": {
          "validate": [Function],
          "vendor": "zod",
          "version": 1,
        },
      },
    },
    {
      "creationType": "input",
      "path": [
        "property: f",
      ],
      "type": "schema",
      "zodType": ZodDefault {
        "_def": {
          "defaultValue": [Function],
          "description": undefined,
          "errorMap": [Function],
          "innerType": ZodString {
            "_def": {
              "checks": [],
              "coerce": false,
              "typeName": "ZodString",
              "zodOpenApi": {
                "current": [Circular],
                "openapi": {
                  "ref": "foo",
                },
              },
            },
            "and": [Function: and],
            "array": [Function: array],
            "brand": [Function: brand],
            "catch": [Function: catch],
            "default": [Function: default],
            "describe": [Function],
            "isNullable": [Function: isNullable],
            "isOptional": [Function: isOptional],
            "nullable": [Function: nullable],
            "nullish": [Function: nullish],
            "optional": [Function: optional],
            "or": [Function: or],
            "parse": [Function: parse],
            "parseAsync": [Function: AsyncFunction],
            "pipe": [Function: pipe],
            "promise": [Function: promise],
            "readonly": [Function: readonly],
            "refine": [Function: refine],
            "refinement": [Function: refinement],
            "safeParse": [Function: safeParse],
            "safeParseAsync": [Function: AsyncFunction],
            "spa": [Function: AsyncFunction],
            "superRefine": [Function: superRefine],
            "transform": [Function: transform],
            "~standard": {
              "validate": [Function],
              "vendor": "zod",
              "version": 1,
            },
          },
          "typeName": "ZodDefault",
        },
        "and": [Function: and],
        "array": [Function: array],
        "brand": [Function: brand],
        "catch": [Function: catch],
        "default": [Function: default],
        "describe": [Function],
        "isNullable": [Function: isNullable],
        "isOptional": [Function: isOptional],
        "nullable": [Function: nullable],
        "nullish": [Function: nullish],
        "optional": [Function: optional],
        "or": [Function: or],
        "parse": [Function: parse],
        "parseAsync": [Function: AsyncFunction],
        "pipe": [Function: pipe],
        "promise": [Function: promise],
        "readonly": [Function: readonly],
        "refine": [Function: refine],
        "refinement": [Function: refinement],
        "safeParse": [Function: safeParse],
        "safeParseAsync": [Function: AsyncFunction],
        "spa": [Function: AsyncFunction],
        "superRefine": [Function: superRefine],
        "transform": [Function: transform],
        "~standard": {
          "validate": [Function],
          "vendor": "zod",
          "version": 1,
        },
      },
    },
  ],
  "schema": {
    "properties": {
      "a": {
        "$ref": "#/components/schemas/foo",
      },
      "b": {
        "$ref": "#/components/schemas/foo",
        "description": "bar",
      },
      "c": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "maxLength": 10,
        "minLength": 1,
      },
      "d": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "description": "bar",
        "maxLength": 10,
        "minLength": 1,
      },
      "e": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "default": "a",
      },
      "f": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "default": "a",
      },
      "g": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "format": "email",
      },
      "h": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "format": "date-time",
      },
      "i": {
        "allOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
        ],
        "example": "foo",
        "maxLength": 10,
        "minLength": 1,
      },
      "j": {
        "$ref": "#/components/schemas/foo",
        "description": "bar",
      },
      "k": {
        "description": "bar",
        "oneOf": [
          {
            "$ref": "#/components/schemas/foo",
          },
          {
            "type": "null",
          },
        ],
      },
      "l": {
        "$ref": "#/components/schemas/foo",
        "description": "bar",
      },
      "m": {
        "$ref": "#/components/schemas/caz",
        "description": "bar",
      },
      "n": {
        "$ref": "#/components/schemas/qux",
      },
      "o": {
        "allOf": [
          {
            "$ref": "#/components/schemas/qux",
          },
        ],
        "description": "qux",
        "properties": {
          "c": {
            "$ref": "#/components/schemas/foo",
          },
        },
        "required": [
          "c",
        ],
      },
    },
    "required": [
      "c",
      "d",
      "g",
      "h",
      "i",
      "l",
      "m",
      "n",
      "o",
    ],
    "type": "object",
  },
  "type": "schema",
}
`;

exports[`enhanceWithMetadata handles current and previous schemas: 
[
  {
    "foo": {
      "type": "string",
    },
  },
  {
    "caz": {
      "properties": {
        "a": {
          "type": "string",
        },
      },
      "required": [
        "a",
      ],
      "type": "object",
    },
  },
  {
    "qux": {
      "allOf": [
        {
          "$ref": "#/components/schemas/caz",
        },
      ],
      "properties": {
        "b": {
          "$ref": "#/components/schemas/foo",
        },
      },
      "required": [
        "b",
      ],
    },
  },
]
 2`] = `
[
  {
    "foo": {
      "type": "string",
    },
  },
  {
    "caz": {
      "properties": {
        "a": {
          "type": "string",
        },
      },
      "required": [
        "a",
      ],
      "type": "object",
    },
  },
  {
    "qux": {
      "allOf": [
        {
          "$ref": "#/components/schemas/caz",
        },
      ],
      "properties": {
        "b": {
          "$ref": "#/components/schemas/foo",
        },
      },
      "required": [
        "b",
      ],
    },
  },
]
`;
